import { z } from "zod";

import { openai } from "@ai-sdk/openai";
import { generateText, tool } from "ai";

export const websiteGenerator = tool({
  description: `Generates or updates the website HTML based on user input and conversation context. Use this tool for all website modifications.
    
Note:
- ALWAYS ASK FOR THE USER DETAILS BEFORE USING THE 'websiteGenerator' tool.
- When asked to create or modify a website, first assess if the request is clear and detailed enough.
- Share what you want to build with the user BEFORE using the 'websiteGenerator' tool.
- When using the websiteGenerator tool, ALWAYS pass the most recent HTML state as the 'currentHtml' parameter. If no previous HTML exists, pass 'null'. The tool's execute function will handle finding the latest state.`,
  parameters: z.object({
    currentHtml: z
      .string()
      .nullable()
      .optional()
      .describe(
        "The current HTML content of the website, if it exists. Can be null if starting fresh."
      ),
    updateInstructions: z
      .string()
      .describe(
        'Specific instructions based on the latest user input for how to update the website (e.g., "Update the overview section with this summary", "Change the main title to \'Project Dashboard\'").'
      ),
  }),
  execute: async ({ currentHtml, updateInstructions }) => {
    console.log("[websiteGenerator] Entering execute");

    try {
      const { text } = await generateText({
        model: openai("gpt-4.1"),
        system: `You are an AI assistant responsible for generating or updating a complete HTML document based on user instructions.
Analyze the 'Update Instructions' and the 'Current HTML' (if provided). If 'Current HTML' is null or empty, generate the initial HTML based *only* on the 'Update Instructions'.
Generate the *complete, updated HTML content* that incorporates the requested changes or creates the initial structure.
Output ONLY the raw, complete, updated HTML string. Do not include any explanations, markdown formatting, or anything other than the HTML code itself. Ensure the output is a valid HTML document starting with <!DOCTYPE html>.


Here is the template for the HTML:
\`\`\`html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>AI Generated Page</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.min.js"></script>
  <style>
    body { background-color: #ffffff; color: #333333; }
    .section { background-color: #f5f5f5; border-radius: 6px; margin-bottom: 1.5rem; }
    .title, .subtitle { color: #333333; }
    .box { background-color: #ffffff; color: #333333; border: 1px solid #e0e0e0; }
    .footer { background-color: #f5f5f5; color: #666666; }
    #error-message-container { color: #ff3860; margin-top: 1rem; text-align: center; }
  </style>
</head>
<body>
  <!-- Header Section -->
  <section class="hero" id="header-section">
    <div class="hero-body">
      <div class="container">
        <h1 class="title" id="main-title">AI Generated Page</h1>
        <h2 class="subtitle" id="main-subtitle">Content being generated...</h2>
      </div>
    </div>
  </section>

  <!-- Main Content Area -->
  <main class="container section" id="main-content-area">
    <!-- Content will be dynamically inserted here by the AI -->
    <p>Loading content...</p>
  </main>

  <!-- Error Message Area -->
  <div class="container" id="error-message-container">
    <!-- Errors will be displayed here -->
  </div>

  <!-- Footer -->
  <footer class="footer" id="footer-section">
    <div class="content has-text-centered">
      <p id="footer-content">Generated by AI</p>
    </div>
  </footer>
</body>
</html>
\`\`\`

**IMPORTANT RESTRICTIONS:**
*   Do NOT invent dynamic data (prices, stats, news, etc.) unless explicitly provided. Use placeholders like "[Current Price]", "[Market Cap]", "[News Headline 1]" or descriptive text like "Chart loading...". Focus on HTML structure.
*   Do NOT use local image paths (e.g., '/img/...') or invent image URLs. Only use external URLs if relevant and certain they exist, otherwise omit images or use placeholders.
*   When adding JavaScript (\`<script>\` tags), do NOT use \`import\`. Assume libraries (like Chart.js) are globally available via CDN (e.g., \`new Chart(...)\`).`,
        prompt: `Current HTML:
${
  currentHtml
    ? `\`\`\`html\n${currentHtml}\n\`\`\``
    : "null (Generate initial HTML based on instructions)"
}

Update Instructions: ${updateInstructions}`,
      });

      // If the AI did not return valid HTML, return the previous HTML and an error.
      if (!text || typeof text !== "string" || text.trim() === "") {
        console.warn(
          "[websiteGenerator] AI did not return valid HTML content. Returning previous HTML."
        );
        return {
          htmlContent: currentHtml,
          error: "AI failed to generate valid HTML content.",
        };
      }

      console.log("[websiteGenerator] Returning generated HTML");
      return { htmlContent: text.trim() };
    } catch (error) {
      console.error("[websiteGenerator] Error during direct AI call:", error);
      return {
        htmlContent: currentHtml,
        error: `Failed to generate HTML: ${
          error instanceof Error ? error.message : String(error)
        }`,
      };
    }
  },
});
